import{_ as a,c as i,o as t,ae as e}from"./chunks/framework.rTUm5mJw.js";const r=JSON.parse('{"title":"常用命令","description":"","frontmatter":{},"headers":[],"relativePath":"Linux/Shell——常用命令.md","filePath":"Linux/Shell——常用命令.md"}'),h={name:"Linux/Shell——常用命令.md"};function p(l,s,n,d,k,o){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h1><h2 id="which命令" tabindex="-1">which命令 <a class="header-anchor" href="#which命令" aria-label="Permalink to &quot;which命令&quot;">​</a></h2><p>which命令用于查找命令的路径，例如：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/usr/bin/ls</span></span></code></pre></div><h2 id="type命令" tabindex="-1">type命令 <a class="header-anchor" href="#type命令" aria-label="Permalink to &quot;type命令&quot;">​</a></h2><p>type命令用于检查命令是否是shell自带命令，也就是说安装了这个shell就可以执行这个命令。与之相对的，外部命令是指系统安装的，与Shell无关的命令，一般情况下，一般用户执行的命令存放于/usr/bin/里面的，管理员命令存放于/usr/sbin里面。</p><p>如果输出一个路径则表示是系统命令，如下示例检测是Shell自带还是系统命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># cd is shell builtin  # cd是shell自带</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> awk</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># awk is /usr/bin/awk  # 系统命令</span></span></code></pre></div><h2 id="输出到终端——echo命令" tabindex="-1">输出到终端——echo命令 <a class="header-anchor" href="#输出到终端——echo命令" aria-label="Permalink to &quot;输出到终端——echo命令&quot;">​</a></h2><p>echo是非常常见的命令，它的作用是输出内容到终端，例如：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  bash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># hello bash</span></span></code></pre></div><p>echo会解析所有的命令行参数，而且会忽略空白符：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$a=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bash&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$echo   hello        $data</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># hello bash</span></span></code></pre></div><p>要想保留空白字符，需要将其放入单引号或双引号中：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   &#39;   hello     bash   &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;   hello     bash   &quot;</span></span></code></pre></div><p>单引号和双引号的区别是对变量的解析与否，双引号会读取以$开头的单词并尝试解析变量值，再插入到字符串中，这种方式叫做“内插”。而单引号则不理会进行变量解析。</p><p>如果不需要解析变量，则使用单引号即可：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;hello $bash&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $bash</span></span></code></pre></div><h2 id="写内容到文件的快速方式" tabindex="-1">写内容到文件的快速方式 <a class="header-anchor" href="#写内容到文件的快速方式" aria-label="Permalink to &quot;写内容到文件的快速方式&quot;">​</a></h2><p>echo命令经常用来快速将少量文本内容写入到文本文件，使用重定向符号<code>&gt;</code>或<code>&gt;&gt;</code>将内容保存到文件而不输出到终端。这两个符号分别可以覆盖内容和追加内容到文件。例如：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    1.md</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  1.md</span></span></code></pre></div><h2 id="read命令" tabindex="-1">read命令 <a class="header-anchor" href="#read命令" aria-label="Permalink to &quot;read命令&quot;">​</a></h2><p>Linux read命令用于从标准输入读取值。</p><p>read命令选项如下：</p><table tabindex="0"><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-p</td><td>后面跟提示信息，即在输入前打印提示信息。</td></tr><tr><td>-n</td><td>后跟一个数字，定义输入文本的长度，很实用。</td></tr><tr><td>-a</td><td>后跟一个变量，该变量会被认为是个数组，然后给其赋值，默认是以空格为分割符。</td></tr><tr><td>-s</td><td>安静模式，在输入字符时不再屏幕上显示，例如login时输入密码。</td></tr></tbody></table><p>-p 参数很常用，允许在 read 命令行中直接指定一个提示信息。例如：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;your name:&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  name</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;welcome，</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div><p>上面的示例运行后，在终端会看到提示字符“your name：”，此时直接输入后按回车，即可将输入的值赋予给变量name。</p><h2 id="将输入存入数组" tabindex="-1">将输入存入数组 <a class="header-anchor" href="#将输入存入数组" aria-label="Permalink to &quot;将输入存入数组&quot;">​</a></h2><p>如果需要用户依次输入多个单词，彼此以空格隔开，那么可以使用-a将输入存入数组。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;arr: &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arr</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;arr的长度: \${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]}&quot;</span></span></code></pre></div><h2 id="查看系统与内核相关信息" tabindex="-1">查看系统与内核相关信息 <a class="header-anchor" href="#查看系统与内核相关信息" aria-label="Permalink to &quot;查看系统与内核相关信息&quot;">​</a></h2><p>要查看系统与内核相关信息，使用uname命令。-a选项表示输出所有信息。-r选项输出内核版本。</p><h2 id="远程连接-ssh命令" tabindex="-1">远程连接：ssh命令 <a class="header-anchor" href="#远程连接-ssh命令" aria-label="Permalink to &quot;远程连接：ssh命令&quot;">​</a></h2><p>ssh命令用于登录远程主机</p><p>要登录远程主机，使用如下命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  user@ip</span></span></code></pre></div><p>此时会提示你输入密码。</p><p>输入<code>exit</code>退出登录。</p><p>在文件 ~/.ssh/known_hosts 中可查询该服务器公钥。</p><h2 id="网络请求-curl命令" tabindex="-1">网络请求：curl命令 <a class="header-anchor" href="#网络请求-curl命令" aria-label="Permalink to &quot;网络请求：curl命令&quot;">​</a></h2><p>curl命令的作用是执行网络请求，取回响应结果，主要是http请求。</p><p>cURL是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。</p><p>cURL支持的通信协议有FTP、FTPS、HTTP、HTTPS、TFTP、SFTP、Gopher、SCP、Telnet、DICT、FILE、LDAP、LDAPS、IMAP、POP3、SMTP和RTSP。</p><p>curl还支持SSL认证、HTTP POST、HTTP PUT、FTP上传,</p><p>例如如下一行命令访问百度，可用于检测是否联网：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://www.baidu.com</span></span></code></pre></div><p>这会输出百度首页的HTML代码。</p><p>如下命令将返回的内容保存到本地：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1.html</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  https://www.baidu.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  2.html</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   https://www.baidu.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -O</span></span></code></pre></div><p>-o选项在本地重命名，-O选项使用服务器上的名称。</p><p>如下示例保存图片：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  图片链接</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image.png</span></span></code></pre></div><p>如下示例保存cookie：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cookie.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  http://www.linux.com</span></span></code></pre></div><p>如下示例发送cookie：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a=1&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;b=2&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  https://www.baidu.com</span></span></code></pre></div><p>如下示例保存header：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> header.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://www.baidu.com</span></span></code></pre></div><p>如下示例模拟Chrome访问：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://google.com</span></span></code></pre></div><h2 id="find" tabindex="-1">find <a class="header-anchor" href="#find" aria-label="Permalink to &quot;find&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>find  要查找的目录  查找选项</span></span></code></pre></div><p>查找选项包括：</p><ul><li>-name 根据文件名，支持通配符</li><li>-type 根据类型，fS文件、d目录</li><li>-size 根据大小</li><li>-user 根据所有者</li><li>-mmin -10 过去10分钟修改的文件</li></ul><p>还可以对找到的文件执行命令，语法：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 要查找的目录</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  查找选项</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 命令</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\;</span></span></code></pre></div><ul><li>花括号表示查找出来的文件名</li><li>在命令末尾，需要家反斜杠和分号</li></ul><p>例如：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $HOME </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;已经找到{}&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  \\;</span></span></code></pre></div><h2 id="locate" tabindex="-1">locate <a class="header-anchor" href="#locate" aria-label="Permalink to &quot;locate&quot;">​</a></h2><p>与find从文件系统查找文件不同，locate命令从一个包含系统文件名的数据库中查找，因此查找效果更快。</p><p>如果运行完update后又新建了文件，那么locate是查找不到的，此时必须再次运行update命令。</p><p>更新数据库：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updatedb</span></span></code></pre></div><p>查找文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">locate.bashrc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/etc/skel/.bashrc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home/student/.bashrc</span></span></code></pre></div><h2 id="进程管理" tabindex="-1">进程管理 <a class="header-anchor" href="#进程管理" aria-label="Permalink to &quot;进程管理&quot;">​</a></h2><p>进程管理命令汇总：</p><ul><li>ps aux ： 查看系统所有进程</li><li>kill -9 进程ID： 终止进程</li><li>命令 &amp; ： 后台执行</li><li>jobs： 查看后台</li><li>fg 编号： 将任务拿到前台</li><li>bg 编号： 使后台任务由Stopped变为Running</li></ul><p>使用<code>ps aux</code>查看系统所有进程。不过这会输出很多内容，通常使用<code>grep</code>管道过滤需要查看的进程。</p><p>要终止进程，运行 <code>kill -9 进程ID </code>。</p><p>在命令行后面加上<code>&amp;</code>，可以将命令放到后台执行。此时会输出 <code>[任务编号] 进程编号</code>。</p><p>如果已经在执行某个操作，例如vim正在编辑文件，或者find正在查找文件，此时使用<code>Ctrl-Z</code>可以暂时将其放到后台。不过，使用<code>Ctrl-Z</code>会使任务变为暂停Stopped状态。</p><p>使用<code>jobs</code>查看后台。会在输出到任务编号后面看到<code>+</code>、<code>-</code>。这表示最近放到后台和最近第二个放到后台的任务。</p><p>使用<code>fg 任务编号</code> 将某个任务拿到前台。如果使用<code>fg</code>会将最近放到后台的任务拿到前台，就是任务列表中带加号的那个任务。</p><p>要使后台的某个任务由Stopped变为Running，使用<code>bg 任务编号</code>命令。</p><h2 id="更改apt镜像源" tabindex="-1">更改apt镜像源 <a class="header-anchor" href="#更改apt镜像源" aria-label="Permalink to &quot;更改apt镜像源&quot;">​</a></h2><p>Ubuntu的/etc/source/sourcs.list 文件格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>deb或deb-src  仓库地址 发行版代号-软件类别 自由软件 非自由软件 ......</span></span></code></pre></div><p>我们说镜像加速，实际上就是修改仓库地址即可，其它结构是完全同步过来的。比如默认仓库地址是<code>http://archive.ubuntu.com/ubuntu/ </code>，把这个换成 <code>https://mirrors.aliyun.com/ubuntu/ </code>即可。</p><p>使用如下命令更换镜像源：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo  sed  -i  s*http://archive.ubuntu.com/ubuntu/*https://mirrors.aliyun.com/ubuntu/*g  /etc/apt/sources.list</span></span></code></pre></div><p>然后，运行如下命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cat /etc/apt/sources.list  # 检查文件内容</span></span>
<span class="line"><span>sudo apt  update    # 更新软件列表</span></span>
<span class="line"><span>sudo  apt  upgrade  # 更新软件</span></span></code></pre></div><h2 id="使用apt管理软件包" tabindex="-1">使用apt管理软件包 <a class="header-anchor" href="#使用apt管理软件包" aria-label="Permalink to &quot;使用apt管理软件包&quot;">​</a></h2><p>apt是Ubuntu系统默认的软件包管理器，其主要操作如下表：</p><ul><li>apt search ^python$ ： 搜索软件包</li><li>apt update： 更新包列表</li><li>apt install python ： 安装包</li></ul><p>这里在搜索软件包时，使用了 <code>^</code> 和 <code>$</code> 正则符号，分别表示匹配单词首部和尾部，目的是严格限定软件的名称，避免搜索结果过多。</p>`,99)]))}const g=a(h,[["render",p]]);export{r as __pageData,g as default};
