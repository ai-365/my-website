import{_ as a,c as i,o as t,ae as e}from"./chunks/framework.CDwmhxVj.js";const r=JSON.parse('{"title":"Pandas","description":"","frontmatter":{},"headers":[],"relativePath":"Python/Pandas.md","filePath":"Python/Pandas.md"}'),p={name:"Python/Pandas.md"};function n(l,s,h,d,k,o){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="pandas" tabindex="-1">Pandas <a class="header-anchor" href="#pandas" aria-label="Permalink to &quot;Pandas&quot;">​</a></h1><h3 id="读取csv" tabindex="-1">读取CSV <a class="header-anchor" href="#读取csv" aria-label="Permalink to &quot;读取CSV&quot;">​</a></h3><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pd.read_csv(路径，</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>参数：</p><ul><li>header：定义那一行作为标题</li><li>sep： 定义分隔符，一般为逗号</li><li>names吧为文件中的每一列定义列名</li><li>usecols： 从csv文件中提取哪些列</li><li>dtype： 列的数据类型</li></ul><p>写入CSV文件：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pd.to_csv(路径)</span></span></code></pre></div><p>写入Excel：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pd.to_excel(路径)</span></span></code></pre></div><h3 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to &quot;排序&quot;">​</a></h3><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df.sort_values(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">by</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;步数&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>ascending=False 表示逆序</p><h3 id="拼接" tabindex="-1">拼接 <a class="header-anchor" href="#拼接" aria-label="Permalink to &quot;拼接&quot;">​</a></h3><p>纵向堆叠：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">concat（[df1,df2], axis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">）</span></span></code></pre></div><p>横向拼接：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">concat（[df1,df2], axis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">）</span></span></code></pre></div><h3 id="与numpy结合" tabindex="-1">与numpy结合 <a class="header-anchor" href="#与numpy结合" aria-label="Permalink to &quot;与numpy结合&quot;">​</a></h3><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nparange（</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">）.reshape(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd.DataFrame(arr)</span></span></code></pre></div><h3 id="行列名称" tabindex="-1">行列名称 <a class="header-anchor" href="#行列名称" aria-label="Permalink to &quot;行列名称&quot;">​</a></h3><p>默认时，均从0开始。</p><p>使用index关键字指定行名称</p><p>使用columns关键字指定列名称</p><h3 id="条件筛选" tabindex="-1">条件筛选 <a class="header-anchor" href="#条件筛选" aria-label="Permalink to &quot;条件筛选&quot;">​</a></h3><p>筛选出步数列中大于10000的行，并返回新的表：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df[df[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;步数&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>注意，query的参数是一个字符串形式，但字段名不要加引号，例如：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df.query(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;  步数&gt;=10000 and 摄入卡路里 &lt;=1800   &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span></code></pre></div><p>提取行或列</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  提取A字段列</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  提取A和B字段列</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df[:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  提取前2行</span></span></code></pre></div><h3 id="缺失值处理" tabindex="-1">缺失值处理 <a class="header-anchor" href="#缺失值处理" aria-label="Permalink to &quot;缺失值处理&quot;">​</a></h3><p>缺失值显示NaN，改成0</p><p>fillna(0)</p><h3 id="loc和iloc" tabindex="-1">loc和iloc <a class="header-anchor" href="#loc和iloc" aria-label="Permalink to &quot;loc和iloc&quot;">​</a></h3><p>loc使用具体的行或列的值提取。iloc使用序号提取。</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df.loc(行,列)</span></span></code></pre></div><p>第一个参数，哪些行，冒号表示所有。如果多个行，使用数组。</p><p>第二个参数，哪些列，冒号表示所有，如果多个列，使用数组形式。</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df.iloc(行号,列号)</span></span></code></pre></div><p>第一个参数，哪几行。冒号表示所有，1:表示第2行到最后一行。</p><p>第二个参数，哪几列。：2表示第1行到2行</p><h3 id="删除列" tabindex="-1">删除列 <a class="header-anchor" href="#删除列" aria-label="Permalink to &quot;删除列&quot;">​</a></h3><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df.drop(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;日期&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">axis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,43)]))}const E=a(p,[["render",n]]);export{r as __pageData,E as default};
