import{_ as e,c as l,o as s,ae as i}from"./chunks/framework.rTUm5mJw.js";const u=JSON.parse('{"title":"基础","description":"","frontmatter":{},"headers":[],"relativePath":"Linux/Linux——基础.md","filePath":"Linux/Linux——基础.md"}'),t={name:"Linux/Linux——基础.md"};function n(h,a,p,d,o,r){return s(),l("div",null,a[0]||(a[0]=[i('<h1 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h1><h2 id="linux简介" tabindex="-1">Linux简介 <a class="header-anchor" href="#linux简介" aria-label="Permalink to &quot;Linux简介&quot;">​</a></h2><p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</p><p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p><h2 id="shell简介" tabindex="-1">Shell简介 <a class="header-anchor" href="#shell简介" aria-label="Permalink to &quot;Shell简介&quot;">​</a></h2><p>在没有图形界面的时代，Shell是用户与操作系统交互的唯一方式。</p><p>用户输入命令，shell将命令传递给操作系统，操作系统执行后返回给shell，显示在终端上，这就是shell执行的一般流程。</p><p>终端只是一个图形界面，shell才是“真正的灵魂”。</p><p>所以，bash是shell，而不是终端，当你安装了bash之后，你可以在任意终端使用bash。</p><p>比如Windows terminal 是Win11自带的终端软件，它里面可以调用的shell包括：powershell、bash（如果已安装）、cmd等。</p><p>Windows10上安装的powershell既可以认为是终端，也可以认为是shell，只是因为它们取了相同的名字。不过我们可以在vscode的集成终端环境中使用powershell，此时PowerShell就是shell。</p><p>最流行的shell是bourne shell，简称bash，它预装在许多流行的Linux发行版上。当然，还有更现代的zsh、颇受用户喜爱的fish等Shell。</p><p>这里更推荐学习Bash，因为一通百通，学会了bash，其它的shell就很容易了。后面的教程都默认使用Bash。</p><h2 id="在windows上获取bash" tabindex="-1">在Windows上获取bash <a class="header-anchor" href="#在windows上获取bash" aria-label="Permalink to &quot;在Windows上获取bash&quot;">​</a></h2><p>bash是大多数Linux默认的shell，但是我们经常使用的是Windows。</p><p>如果不想安装完整的Linux桌面操作系统，而只是想在Windows上获取一个Bash环境，有几种解决方案。</p><ul><li>Cygwin</li></ul><p>Cygwin在Windows下提供了具备Linux观感的类Linux环境，提供了大量的POSIX ApI功能的DLL。</p><p>但是请注意，cygwin不是在Windows上运行原生Linux程序的方法，如果要这么做，必须从源代码构建。</p><ul><li>wsl</li></ul><p>wsl是微软推出的在Windows上运行的Linux子系统，可以直接到应用商店搜索Ubuntu下载安装。</p><ul><li>git bash</li></ul><p>大多数情况下，我们只是想使用shell命令，而并不需要Linux环境，此时可以使用git bash。</p><p>安装git 默认安装git bash ，它包括了很多与shell命令同名的exe文件，可以直接使用。实际上这些命令足够我们学习完整的shell了。</p><h2 id="终端提示符" tabindex="-1">终端提示符 <a class="header-anchor" href="#终端提示符" aria-label="Permalink to &quot;终端提示符&quot;">​</a></h2><p>打开终端后，每次在输入命令前会看到有一段文本，这段文本叫终端提示符：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[  username@hostname~  ]$</span></span></code></pre></div><p>这里的username表示用户名称， hostname表示主机名，~表示当前工作目录是用户的家目录。</p><p>中括号后面会接一个美元符号<code>$</code>或井号#。美元符号<code>$</code>表示一般用户，井号地代表管理员。</p><p>Linux有两种用户，一般用户和管理员用户，大部分文件系统管理相关的命令只需要一般用户即可。</p><p>我们后面的代码示例会省略中括号的内，只显示提示符<code>$</code>，表示后面的内容是你需要输入到终端的。注意，只需要输入$后面的文本，而不能重复输入<code>$</code>。一般紧接着会我们会写出终端返回的结果。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$  which ls    # which ls是需要输入的命令</span></span>\n<span class="line"><span>/usr/bin/ls   # 终端显示的结果</span></span></code></pre></div><p>和大多数编程语言不一样，Linux在命令行和脚本中使用井号#表示将该行后面的内容注释掉。例如上文示例。</p><h2 id="bash常用快捷键" tabindex="-1">Bash常用快捷键 <a class="header-anchor" href="#bash常用快捷键" aria-label="Permalink to &quot;Bash常用快捷键&quot;">​</a></h2><p>Bash常用快捷键如下：</p><table tabindex="0"><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>Ctr+C</td><td>停止正在运行的任务</td></tr><tr><td>Ctrl+D</td><td>退出当前Shell</td></tr><tr><td>Ctrl+U</td><td>清空当前命令行内容</td></tr><tr><td>Ctrl+A</td><td>移到行首</td></tr><tr><td>Ctrl+E</td><td>移到行尾</td></tr><tr><td>Ctrl+K</td><td>从光标出删除到末尾</td></tr></tbody></table><h2 id="tab补全" tabindex="-1">Tab补全 <a class="header-anchor" href="#tab补全" aria-label="Permalink to &quot;Tab补全&quot;">​</a></h2><p>使用命令行最多的按键或许就是Tab键了，所以单独使用一小节讲解。Tab键会根据你已经输入的少数几个字符自动猜测后面的内容并进行补全。常见的情况有以下几种。</p><ul><li><p>命令补全： 例如先输入ec两个字符，按Tab键，Bash会补全成echo。不过Linux命令一般都比较简短，一般都是直接写完整的命令。</p></li><li><p>文件名称补全： 这是最实用的功能，一般来说文件名都比较长，如果每次都要输入完整的文件名不仅费时而且极容易出错。此时，只需要输入文件名的前一个或少数几个字符，再按下Tab键就可以自动补全文件名，如果匹配的文件名超过1个，那么终端就会输出匹配的文件名供我们再次输入以缩小范围。</p></li></ul><h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h2><h3 id="bash的内置环境变量" tabindex="-1">Bash的内置环境变量 <a class="header-anchor" href="#bash的内置环境变量" aria-label="Permalink to &quot;Bash的内置环境变量&quot;">​</a></h3><p>以下是直接可以使用的环境变量，注意区分大小写。</p><ul><li>HOME ： 当前用户家目录</li><li>USER：用户名</li><li>CDPATH： 以冒号分隔的目录列表，作为cd命令的搜索路径</li><li>PS1 ： shell命令行的主提示符</li><li>PS2： shell命令行的次提示符</li><li>PATH： shell查找命令时检索的目录列表，以冒号分隔</li><li>BASH ： bash shell 当前实例的完整路径名</li><li>BASH_VERSION：bash版本</li><li>LANG ：当前环境的语言</li><li>HISTFILE：历史文件的位置，通常位于<code>$HONE/.bash_history</code></li><li>HISTFILESIZE：可以存储的历史命令条数，默认为1000，这个值对于大多数情况够用。</li><li>HOSTNAME： 当前主机名称</li><li>OSTYPE：操作系统类型。</li><li>LINES ：终端山可见的行数</li><li>PS0：执行命令之前显示的内容</li><li>PWD：当前工作目录</li></ul><h3 id="修改path环境变量" tabindex="-1">修改PATH环境变量 <a class="header-anchor" href="#修改path环境变量" aria-label="Permalink to &quot;修改PATH环境变量&quot;">​</a></h3><p>一个非常常见的场景是将一些路径添加到PATH环境变量的路径列表中，也就是修改PATH环境变量的值。</p><p>例如，将家目录的bin目录添加到PATH环境变量：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$PATH=&quot;${PATH}:/${HOME}/bin&quot;</span></span></code></pre></div><h3 id="新增和修改自定义环境变量" tabindex="-1">新增和修改自定义环境变量 <a class="header-anchor" href="#新增和修改自定义环境变量" aria-label="Permalink to &quot;新增和修改自定义环境变量&quot;">​</a></h3><p>export命令可以将指定的变量设置为环境变量。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ ENV_EXANPLE=ENV_EXAMLLE_VALUE</span></span>\n<span class="line"><span>$ export ENV_EXANPLE</span></span></code></pre></div><p>也可以写在一起：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export ENV_EXANPLE=ENV_EXAMLLE_VALUE</span></span></code></pre></div><p>读取环境变量和普通变量的方式一样，使用美元符<code>$</code>。</p><p>不过，此时环境变量还没有永久生效，当重启后，自定义环境变量就就会被清除，要让自定义环境变量永久生效，一个常用的方式是将该行命令添加到<code>$HOME/.bashrc</code>。然后执行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>source $HOME/.bashrc</span></span></code></pre></div><p>这会立即生效，而无需重启或注销。</p><h3 id="普通变量和环境变量的区别" tabindex="-1">普通变量和环境变量的区别 <a class="header-anchor" href="#普通变量和环境变量的区别" aria-label="Permalink to &quot;普通变量和环境变量的区别&quot;">​</a></h3><p>普通变量和自定义环境变量本质上都是变量，声明和使用的方式一模一样，这两者的区别主要在于生命周期的不同。</p><ul><li>普通变量是临时的，只在此次使用shell时有用，下次使用shell（注销或重启后）就不存在了。</li><li>环境变量包括内置的和自定义的，是永久可以使用的。</li></ul><p>是否要将普通变量永久保存，也就是变为环境变量，取决于自己的实际需求。一般而言，需要重读多次使用的变量应该提升为环境变量，少数几次使用的则使用普通变量即可。</p>',61)]))}const b=e(t,[["render",n]]);export{u as __pageData,b as default};
