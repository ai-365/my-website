import{_ as s,c as a,o as t,ae as l}from"./chunks/framework.CDwmhxVj.js";const n="/blog/assets/Gradio.DrdRigXG.png",E=JSON.parse('{"title":"Gradio","description":"","frontmatter":{},"headers":[],"relativePath":"人工智能/Gradio.md","filePath":"人工智能/Gradio.md"}'),e={name:"人工智能/Gradio.md"};function h(d,i,p,r,k,o){return t(),a("div",null,i[0]||(i[0]=[l(`<h1 id="gradio" tabindex="-1">Gradio <a class="header-anchor" href="#gradio" aria-label="Permalink to &quot;Gradio&quot;">​</a></h1><h2 id="安装gradio" tabindex="-1">安装gradio <a class="header-anchor" href="#安装gradio" aria-label="Permalink to &quot;安装gradio&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pip install gradio</span></span></code></pre></div><h2 id="导入gradio" tabindex="-1">导入gradio <a class="header-anchor" href="#导入gradio" aria-label="Permalink to &quot;导入gradio&quot;">​</a></h2><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gradio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gr</span></span></code></pre></div><h2 id="一个简单的示例" tabindex="-1">一个简单的示例 <a class="header-anchor" href="#一个简单的示例" aria-label="Permalink to &quot;一个简单的示例&quot;">​</a></h2><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gradio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gr</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, intensity):  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 参数列表对应输入 name文本框、intensity滑块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(intensity)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出对应，文本框</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">demo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gr.Interface(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">greet ,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定函数</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;slider&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] ,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定输入类型： 一个文本框、一个滑块</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    outputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定输出类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">demo.launch()</span></span></code></pre></div><h2 id="gr-interface-的三大重要参数" tabindex="-1">gr.Interface()的三大重要参数 <a class="header-anchor" href="#gr-interface-的三大重要参数" aria-label="Permalink to &quot;gr.Interface()的三大重要参数&quot;">​</a></h2><p>Gradio的核心是Interface类，它允许用户定义输入和输出类型，创建交互式的Web界面。gr.Interface()有三大重要参数：</p><ul><li>fn处理函数： 用于定义如何根据输入返回输出。</li><li>inputs输入列表： 输入可以有一个或多个（列表）。每个元素支持多种输入类型，如gr.Text()用于文本输入，gr.Image()用于图像上传，gr.Audio()用于音频输入等。</li><li>outputs输出列表：输出使用函数的return指定，可以输出一个或多个。</li></ul><h2 id="interface-的其它参数" tabindex="-1">Interface()的其它参数 <a class="header-anchor" href="#interface-的其它参数" aria-label="Permalink to &quot;Interface()的其它参数&quot;">​</a></h2><ul><li>title ：标题</li><li>description ：描述</li><li>layout： 输入输出组件的布局</li><li>theme 界面主题风格，如dark</li><li>css ： css样式</li><li>layout： 使用layout=&quot;grouped&quot;或layout=&quot;stacked&quot;来更改组件的排列方式，使界面更加紧凑或分散。</li></ul><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><p>文本类：</p><table tabindex="0"><thead><tr><th>类型</th><th>简写</th><th>含义</th><th>参数列表</th></tr></thead><tbody><tr><td>gr.Text()</td><td>text</td><td>单行文本输入框</td><td></td></tr><tr><td>gr.Textbox()</td><td>textbox</td><td>单行文本输入框</td><td>default：默认文本;placeholder：占位符文本</td></tr><tr><td>gr.Textarea()</td><td>textarea</td><td>多行文本输入框</td><td>lines：显示行数，整数值;placeholder： 占位符文本</td></tr><tr><td>gr.Number()</td><td>number</td><td>数字输入框</td><td>default：默认数字;label：标签文本</td></tr><tr><td>gr.Time()</td><td>time</td><td>输入时间</td><td>label：标签文本</td></tr><tr><td>gr.Slider()</td><td>slider</td><td>滑动条，用于选择一定范围的数值</td><td>minimum： 最小值;maximum：最大;step：步长;label：标签文本</td></tr><tr><td>gr.Radio()</td><td>radio</td><td>单选框</td><td>choices：字符串数组;label： 标签文本</td></tr><tr><td>gr.Checkbox()</td><td>checkbox</td><td>复选框，布尔类型</td><td>label：复选框旁边的文本</td></tr><tr><td>gr.ColorPicker()</td><td>colorpicker</td><td>选择颜色，十六进制颜色代码</td><td>default：默认颜色值</td></tr><tr><td>gr.Dropdown()</td><td>dropdown</td><td>下拉菜单</td><td>choices：字符串数组</td></tr></tbody></table><p>附件类：</p><table tabindex="0"><thead><tr><th>类型</th><th>简写</th><th>含义</th><th>参数列表</th></tr></thead><tbody><tr><td>gr.File()</td><td>file</td><td>上传任意文件</td><td>file_count： 允许上传的数量，取值single（只能传一个）、multiple（可以传多个）; type： 数据类型，如file、audio</td></tr><tr><td>gr.Dataframe()</td><td>dataframe</td><td>上传csv文件或输入dataframe</td><td>headers: 列标题数组; row_count: 初始显示的行数</td></tr><tr><td>gr.Data()</td><td>data</td><td>上传二进制数据，用于上传音频或视频的原始字节</td><td>type：类型，可以是 auto 自动推断</td></tr><tr><td>gr.Image()</td><td>image</td><td>上传图片，支持多种图像格式</td><td>type： 图像类型，如pil</td></tr><tr><td>gr.Video()</td><td>video</td><td>上传视频</td><td>label：标签文本</td></tr><tr><td>gr.Audio()</td><td>audio</td><td>上传音频</td><td>source：指定音频来源;type：指定返回类型;label：标签文本</td></tr></tbody></table><h2 id="输出组件的类型" tabindex="-1">输出组件的类型 <a class="header-anchor" href="#输出组件的类型" aria-label="Permalink to &quot;输出组件的类型&quot;">​</a></h2><p>输出组件的类型除了包括上面表格中的类型以外，还包括：</p><ul><li>Carousel：以轮播方式展示多个输出，适用于图像集多个数据点。参数：item_type 设置轮播项目类型。例：gr.Carousel(item_type=&quot;image&quot;)</li><li>Gallery：以画廊形式展示一系列图像。</li><li>HTML：展示HTML内容，适用于富文本或网页布局。</li><li>Image：展示图像。参数：type 指定图像格式。 例：gr.Image(type=&quot;pil&quot;)</li><li>JSON：以JSON格式展示数据，便于查看结构化数据。</li><li>KeyValues：以键值对形式展示数据。</li><li>Label：展示文本标签，适用于简单的文本输出。</li><li>Markdown：支持Markdown格式的文本展示。</li><li>Plot：展示图表，如matplotlib生成的图表。</li><li>Text：用于显示文本，适合较长的输出。</li></ul><h2 id="gradio集成大模型" tabindex="-1">Gradio集成大模型 <a class="header-anchor" href="#gradio集成大模型" aria-label="Permalink to &quot;Gradio集成大模型&quot;">​</a></h2><p>如下代码集成了HuggingFace的图像分类模型：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gradio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gr</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transformers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pipeline</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 加载Huggingface上的预训练模型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pipeline(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image-classification&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义处理函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> classify_image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(img):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {i[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;label&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]: i[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;score&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model(img)}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建Gradio界面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gr.Interface(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">classify_image,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gr.Image(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pil&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 图片类型</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    outputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gr.Label(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num_top_classes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iface.launch()</span></span></code></pre></div><p><img src="`+n+'" alt="Gradio"></p>',24)]))}const c=s(e,[["render",h]]);export{E as __pageData,c as default};
