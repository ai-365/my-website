import{_ as i,c as a,o as p,ae as t}from"./chunks/framework.rTUm5mJw.js";const c=JSON.parse('{"title":"模块、包、pip","description":"","frontmatter":{},"headers":[],"relativePath":"人工智能/Python——模块和包管理.md","filePath":"人工智能/Python——模块和包管理.md"}'),n={name:"人工智能/Python——模块和包管理.md"};function e(h,s,l,k,d,o){return p(),a("div",null,s[0]||(s[0]=[t(`<h1 id="模块、包、pip" tabindex="-1">模块、包、pip <a class="header-anchor" href="#模块、包、pip" aria-label="Permalink to &quot;模块、包、pip&quot;">​</a></h1><h2 id="模块和包" tabindex="-1">模块和包 <a class="header-anchor" href="#模块和包" aria-label="Permalink to &quot;模块和包&quot;">​</a></h2><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sound</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                          最高层级的包</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.py               初始化 sound 包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      formats</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  用于文件格式转换的子包</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.py</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              wavread.py</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              wavwrite.py</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              aiffread.py</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              aiffwrite.py</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              auread.py</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              auwrite.py</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      effects</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  用于音效的子包</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.py</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              echo.py</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              surround.py</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              reverse.py</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      filters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  用于过滤器的子包</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.py</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              equalizer.py</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              vocoder.py</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              karaoke.py</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              ...</span></span></code></pre></div><h3 id="包和模块的区别" tabindex="-1">包和模块的区别 <a class="header-anchor" href="#包和模块的区别" aria-label="Permalink to &quot;包和模块的区别&quot;">​</a></h3><p>要将一个文件夹变成Python包，需要在文件夹下添加__init__.py 文件。</p><p>包和子包是不同的包，示例中，sound包和sound.effects是不同的包。</p><p>包是文件夹，模块是Python文件。</p><p>导入包时，实际执行的是文件夹里面的__init__文件。导入模块时，就是执行这个模块文件。</p><h3 id="包和文件夹的区别" tabindex="-1">包和文件夹的区别 <a class="header-anchor" href="#包和文件夹的区别" aria-label="Permalink to &quot;包和文件夹的区别&quot;">​</a></h3><p>一个包本质上就是操作系统的一个文件夹，里面有若干.py文件。子包就是子文件夹。</p><p>包和文件夹的唯一区别就是包里面有一个特殊文件： <code>__init__.py</code>文件。</p><p>要将一个文件夹变成Python包，需要在文件夹下添加<code>__init__.py</code> 文件。</p><p>包和子包是不同的包，示例中，sound包和sound.effects是不同的包。</p><h3 id="import-语法" tabindex="-1">import 语法 <a class="header-anchor" href="#import-语法" aria-label="Permalink to &quot;import 语法&quot;">​</a></h3><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sound.effects.echo</span></span></code></pre></div><p>使用时需要使用全名称前缀：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sound.effects.echo.类变量或函数。</span></span></code></pre></div><p>如果不想麻烦，则导入时应该使用as重命名：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sound.effects.echo  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> echo</span></span></code></pre></div><p>这样，使用时：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">echo.类、变量或函数</span></span></code></pre></div><h3 id="from-import-语法" tabindex="-1">from import 语法 <a class="header-anchor" href="#from-import-语法" aria-label="Permalink to &quot;from import 语法&quot;">​</a></h3><p>导入模块：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sound.effects </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> echo</span></span></code></pre></div><p>使用：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">echo.类、变量或函数</span></span></code></pre></div><p>导入模块里面的所有变量、类或函数：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sound.effects.echo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span></code></pre></div><p>然后，不加模块前缀，直接使用里面的类、变量或函数。</p><p>导入模块里面具体的类、变量或函数：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sound.effects.echo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> echofilter</span></span></code></pre></div><p>使用时：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">echofilter()</span></span></code></pre></div><p><code>*</code> 默认为模块里面所有的全局变量、类和函数。但如果模块里面定义了 <code>__all__</code>数组，数组里面限制了导出了哪些变量、类或函数，则 <code>*</code>只会导入这些变量、类或函数。</p><h3 id="import和from-import的区别" tabindex="-1">import和from import的区别 <a class="header-anchor" href="#import和from-import的区别" aria-label="Permalink to &quot;import和from import的区别&quot;">​</a></h3><p><code>import</code> 只能导入包、子包、模块，使用时需要使用全名称前缀，除非用as重命名。</p><p><code>from import</code> 可以导入包、子包、模块、具体的变量、函数。导入变量或函数时直接使用，不需要前缀。</p><h3 id="from-相对导入" tabindex="-1">from 相对导入 <a class="header-anchor" href="#from-相对导入" aria-label="Permalink to &quot;from 相对导入&quot;">​</a></h3><p>如果surround.py要导入echo.py，可以使用：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> . </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> echo</span></span></code></pre></div><p>. 表示当前文件夹。</p><p>如果surround.py要导入formats包，可以使用：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .. </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  formats</span></span></code></pre></div><p>.. 表示上一级文件夹。</p><p>如果surround.py要导入formats包里面的wavread.py，可以使用：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ..formats  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  wavread</span></span></code></pre></div><p>..formats表示上一级文件夹中的formats文件夹。</p><h3 id="导入包时具体执行了什么" tabindex="-1">导入包时具体执行了什么？ <a class="header-anchor" href="#导入包时具体执行了什么" aria-label="Permalink to &quot;导入包时具体执行了什么？&quot;">​</a></h3><p>导入模块时，就是执行这个模块文件。</p><p>而导入包时，实际执行的是文件夹里面的<code>__init__</code>文件。</p><h2 id="模块" tabindex="-1">模块 <a class="header-anchor" href="#模块" aria-label="Permalink to &quot;模块&quot;">​</a></h2><p>大多数情况下，一个模块是一个目录，里面包含许多个文件或子目录，用来定义不同的功能。</p><p>要让一个文件夹变成一个Python模块，只需要在该文件夹内新建一个<code>__init__.py</code>文件，当模块被导入时会自动执行里面的代码。注意，<code>__init__py</code>文件一定要存在，哪怕内容为空。同时，每个子目录也要有<code>__init__.py</code>文件。</p><p>默认情况下，会按照如下顺序搜索模块：</p><ul><li>当前目录。</li><li>PYTHONPATH环境变量，这是一个目录列表。</li><li>Python安装目录的site-packages目录。</li></ul><p>模块可以指定只导出哪些内容，这是可以使用<code>__all__</code>变量，例如：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__all__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>这样，在使用如下两个语句中的一个时，都只会导入这三个变量：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span></code></pre></div><p><code>import</code> 语句导入另一个模块对象，另一个模块导出的内容都是该对象的成员，例如：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">package.foo()</span></span></code></pre></div><p>要使用from语句导入特定的变量，使用：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, foo</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo()</span></span></code></pre></div><p>还可以导入另一个模块导出的全部内容：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span></code></pre></div><p>还可以在导入时重命名：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alias1</span></span></code></pre></div><h2 id="pip包管理器" tabindex="-1">pip包管理器 <a class="header-anchor" href="#pip包管理器" aria-label="Permalink to &quot;pip包管理器&quot;">​</a></h2><p>pip是Python官方的包管理器，默认随着Python程序一起安装。</p><h3 id="基础用法" tabindex="-1">基础用法 <a class="header-anchor" href="#基础用法" aria-label="Permalink to &quot;基础用法&quot;">​</a></h3><p>要检查pip是否已经安装，在终端中运行：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pip</span></span></code></pre></div><p>如果已经安装，则会输出pip的帮助信息。</p><p>要安装Python包，运行：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pip install package</span></span></code></pre></div><p>如果将当前目录下的requirements.txt中列出的依赖安装到当前目录，运行：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pip install </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r  requirements.txt  .</span></span></code></pre></div><p>要显示已经安装的包列表，运行：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pip </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">list</span></span></code></pre></div><p>要卸载某个包，运行：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pip uninstall package </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span></span></code></pre></div><p>加上 -y 或 --yes 选项表示确认卸载，如果不加，则需要在终端中手动确认。</p><h3 id="换源" tabindex="-1">换源 <a class="header-anchor" href="#换源" aria-label="Permalink to &quot;换源&quot;">​</a></h3><p>可以将包的下载源地址切换到国内源，例如阿里云的源，以提升下载速度。有两种方式：命令替换和手动替换。</p><p>第一种方式，命令替换，推荐使用。运行如下命令，切换成阿里云的源：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pip config </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url  https:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mirrors.aliyun.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pypi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">simple</span></span></code></pre></div><p>第二种方式，手动替换。在用户家目录下，创建文件pip.ini，并添加如下内容：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mirrors.aliyun.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pypi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">simple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[install]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">trusted</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mirrors.aliyun.com</span></span></code></pre></div><p>这样，pip会默认使用这个源。</p><p>当然，也可以临时指定，使用 <code>-i</code> 选项，例如：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pip install </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r requirements.txt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i https:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mirrors.aliyun.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pypi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">simple</span></span></code></pre></div><h3 id="自定义安装位置" tabindex="-1">自定义安装位置 <a class="header-anchor" href="#自定义安装位置" aria-label="Permalink to &quot;自定义安装位置&quot;">​</a></h3><p>pip默认会将包安装到如下位置：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Python安装目录\\</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">Lib\\site-packages</span></span></code></pre></div><p>使用--target选项将Python包安装到自定义的位置。</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pip install  </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">安装路径名</span></span></code></pre></div><p>如果按照路径名包含空格，需用双引号包裹。</p><h3 id="包搜索顺序" tabindex="-1">包搜索顺序 <a class="header-anchor" href="#包搜索顺序" aria-label="Permalink to &quot;包搜索顺序&quot;">​</a></h3><p>Python 解释器运行时会按照如下 1~5 的顺序依次搜索 import 语句指定的包。如果有同名包，那么按照1 ~ 5 的顺序使用先找到的：</p><ol><li>python主程序所在目录及其子目录</li><li>环境变量 PYTHONPATH中的路径列表</li><li>标准库目录，即 Python安装目录\\Lib</li><li>任何.pth文件中的指定的目录，.pth 文件需要放在 Python 安装目录的根目录下</li><li>Python安装目录下的 site-packages 主目录</li></ol><h3 id="pythonpath" tabindex="-1">PYTHONPATH <a class="header-anchor" href="#pythonpath" aria-label="Permalink to &quot;PYTHONPATH&quot;">​</a></h3><p>PYTHONPATH是第三包库的搜索路径，默认第三方包安装在<code>Python安装目录\\Lib\\site-packages</code>，但也可以自定义。</p><p>要获取PYTHONPATH，通过<code>os.environ[&#39;PYTHONPATH&#39;]</code>。</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.environ[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;PYTHONPATH&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h2 id="虚拟环境-venv" tabindex="-1">虚拟环境：venv <a class="header-anchor" href="#虚拟环境-venv" aria-label="Permalink to &quot;虚拟环境：venv&quot;">​</a></h2><p>要创建虚拟环境，请确定要放置它的目录：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">python </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m venv 虚拟环境目录</span></span></code></pre></div><p>一旦创建虚拟环境，就会在虚拟环境目录的Scripts下面找到两个脚本文件：</p><ul><li>activate.ps1 激活该虚拟环境。</li><li>deactivate.ps1 退出该虚拟环境</li></ul><p>虚拟环境本质上是一个文件夹，包含了特定包及其版本。避免了多个项目第三方包版本的冲突。</p><p>执行如下命令，安装requirements.txt列出的包依赖：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pip install </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r requirements.txt</span></span></code></pre></div>`,113)]))}const E=i(n,[["render",e]]);export{c as __pageData,E as default};
