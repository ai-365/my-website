import{_ as e,c as a,o as s,ae as n}from"./chunks/framework.rTUm5mJw.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"人工智能/Python——文件系统——打开文件.md","filePath":"人工智能/Python——文件系统——打开文件.md"}'),p={name:"人工智能/Python——文件系统——打开文件.md"};function i(o,t,l,c,_,d){return s(),a("div",null,t[0]||(t[0]=[n('<p>读写文件的第一步是打开文件，使用内置的open()函数，该函数需要指定三个参数：文件名、打开方式、编码。</p><p>如果文件名包含路径，路径之间使用正斜杠即可，这也适用于Windows路径。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>file = open(r&#39;file.txt&#39;,encoding=&#39;utf8&#39;, 打开模式)</span></span></code></pre></div><p>打开方式大部分情况下只需要三种：r（只读）、w（覆盖写）、a（追加）。如果省略，则为默认值r只读。</p><p>对于编码，大部分情况使用通用的utf8编码即可。</p><p>在处理文件对象时，还可以使用 with 关键字。优点是，子句体结束后，文件会正确关闭，即便触发异常也可以。而且，使用 with 相比等效的 try-finally 代码块要简短得多。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>with open(r&#39;file.txt&#39;,encoding=&#39;utf8&#39;, 打开方式) as file:</span></span></code></pre></div><p>f也叫做文件描述符，这和C语言中的概念是类似的。得到f后，就可以对文件内容进行读写了。</p>',8)]))}const f=e(p,[["render",i]]);export{h as __pageData,f as default};
