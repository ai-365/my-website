import{_ as a,c as i,o,ae as s}from"./chunks/framework.rTUm5mJw.js";const u=JSON.parse('{"title":"Docker","description":"","frontmatter":{},"headers":[],"relativePath":"Linux/Docker.md","filePath":"Linux/Docker.md"}'),t={name:"Linux/Docker.md"};function l(c,e,d,r,n,p){return o(),i("div",null,e[0]||(e[0]=[s('<h1 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h1><h2 id="镜像和容器的概念区别" tabindex="-1">镜像和容器的概念区别 <a class="header-anchor" href="#镜像和容器的概念区别" aria-label="Permalink to &quot;镜像和容器的概念区别&quot;">​</a></h2><p>一个镜像只是一个压缩文件，这是一种模板，可以使用镜像实例化多个容器。一个容器表示具体的一个实例，有自己的生命周期，包括启动、停止、删除。</p><p>镜像好比操作系统安装文件，容器好比通过此文件安装到机器上并运行起来的操作系统。</p><h2 id="docker主要命令汇总" tabindex="-1">docker主要命令汇总 <a class="header-anchor" href="#docker主要命令汇总" aria-label="Permalink to &quot;docker主要命令汇总&quot;">​</a></h2><ul><li>docker create imageName：从镜像创建一个容器</li><li>docker start imageName ：从镜像启动一个容器，或重启一个运行的容器</li><li>docker run imageName ： 从镜像启动一个容器</li><li>docker pause container ：挂起，也叫暂停</li><li>docker stop containerName：停止容器</li><li>docker kill containerName：停止容器</li><li>docker restart containerName ：重启</li><li>docker rm containerName：删除</li><li>docker ps : 查看容器信息</li><li>docker image ls ：查看本地镜像列表</li></ul><h2 id="docker-run命令" tabindex="-1">docker run命令 <a class="header-anchor" href="#docker-run命令" aria-label="Permalink to &quot;docker run命令&quot;">​</a></h2><p>docker run 用来启动一个容器，优先从本地寻找镜像，如果本地找不到，则从远程仓库拉取。</p><ul><li><code>-d</code> 后台启动，并返回容器ID。</li><li><code>-i</code>： 交互模式运行容器</li><li><code>-P</code> ： 随机端口映射，容器内部端口映射到主机是随机端口</li><li><code>-p</code> ： 指定端口映射，格式为 <code>-p 主机端口:容器端口</code>，如果端口一样，可以只写一个</li><li><code>-t</code>： 为容器重新分配一个伪输入终端，通常与-i搭配：-it</li><li><code>--name</code> ： 指定容器名称</li><li><code>-v</code> 指定一个目录映射到本地某个文件夹</li></ul><h2 id="docker-build命令" tabindex="-1">docker build命令 <a class="header-anchor" href="#docker-build命令" aria-label="Permalink to &quot;docker build命令&quot;">​</a></h2><p>根据Dockerfile配置文件，创建一个镜像。</p><p>默认配置文件为项目目录下的Dockerfile文件。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker build -t 镜像名称:tag  .</span></span></code></pre></div><p>最后的点号(.)表示将本目录下的所有文件打包成一个镜像，一定不能忽略。</p><h2 id="目录映射" tabindex="-1">目录映射 <a class="header-anchor" href="#目录映射" aria-label="Permalink to &quot;目录映射&quot;">​</a></h2><p>使用 <code>-v</code> 选项，可以将容器内的目录映射到本地主机，这样，两个目录下的内容始终是同步的。语法如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run -it -v 宿主机目录:容器目录</span></span></code></pre></div><h2 id="编写dockerfile文件" tabindex="-1">编写Dockerfile文件 <a class="header-anchor" href="#编写dockerfile文件" aria-label="Permalink to &quot;编写Dockerfile文件&quot;">​</a></h2><p>Dockerfile是构建镜像的配置文件，Docker依据Dockerfile文件逐行执行其中的命令，从而构建我们所需的镜像。</p><h3 id="from-获取基础镜像" tabindex="-1">FROM ： 获取基础镜像 <a class="header-anchor" href="#from-获取基础镜像" aria-label="Permalink to &quot;FROM ： 获取基础镜像&quot;">​</a></h3><p>FROM的作用是获取基础镜像，必须写且必须写在第一行。</p><p>FROM的格式为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>FROM image:tag</span></span></code></pre></div><p>image是镜像名称，tag是版本标签，一般为数字或latest，如果不写默认为最新版。</p><h3 id="copy-复制本地文件到镜像" tabindex="-1">COPY：复制本地文件到镜像 <a class="header-anchor" href="#copy-复制本地文件到镜像" aria-label="Permalink to &quot;COPY：复制本地文件到镜像&quot;">​</a></h3><p>COPY 的作用是将本地文件复制到镜像内的虚拟目录。COPY的语法格式为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>COPY src1 src2 ...  dest</span></span></code></pre></div><p>src可以是文件或目录。dest是镜像的目标目录。不过，尽量不要将src写成文件夹，因为会复制整个目录的内容,包括文件系统元数据。</p><p>文件名支持使用通配符。</p><p>COPY命令的示例如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>COPY  *.html  *.js  *.css  /opt</span></span></code></pre></div><p>复制文件还有一个命令是ADD。ADD和COPY都是复制，但由于COPY命令更透明，一般优先使用COPY。</p><h3 id="run-执行命令" tabindex="-1">RUN：执行命令 <a class="header-anchor" href="#run-执行命令" aria-label="Permalink to &quot;RUN：执行命令&quot;">​</a></h3><p>RUN的作用是在构建时执行一条或多条命令，例如通过yum或apt下载软件包。</p><p>需要特别指出的是，Dockerfile的每一行命令被执行后都会新增一层镜像。因此，最佳的做法是将RUN执行的多条命令合并在一行写，用&amp;&amp;连接，这样有助于减小最终镜像的体积。</p><p>RUN命令示例如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RUN echo 1 &amp;&amp; echo 2</span></span></code></pre></div><h3 id="workdir-设置初始目录" tabindex="-1">WORKDIR ：设置初始目录 <a class="header-anchor" href="#workdir-设置初始目录" aria-label="Permalink to &quot;WORKDIR ：设置初始目录&quot;">​</a></h3><p>WORKDIR的作用是设置容器启动后的初始目录，类似于cd。此后的命令都将以此为工作目录。</p><h3 id="env-设置环境变量" tabindex="-1">ENV：设置环境变量 <a class="header-anchor" href="#env-设置环境变量" aria-label="Permalink to &quot;ENV：设置环境变量&quot;">​</a></h3><p>ENV的作用是设置环境变量，可以一次设置一个：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ENV key1=value1 key2=value2</span></span></code></pre></div><h3 id="cmd-容器启动后的初识命令" tabindex="-1">CMD ：容器启动后的初识命令 <a class="header-anchor" href="#cmd-容器启动后的初识命令" aria-label="Permalink to &quot;CMD ：容器启动后的初识命令&quot;">​</a></h3><p>从镜像开启容器实例后运行的初始命令，初始命令只能有一个。</p><p>CMD命令包括各选项参数用引号包裹，各个部分逗号隔开。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CMD echo &quot;hello&quot;</span></span></code></pre></div>',46)]))}const k=a(t,[["render",l]]);export{u as __pageData,k as default};
