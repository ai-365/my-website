import{_ as a,c as i,o as t,ae as n}from"./chunks/framework.rTUm5mJw.js";const y=JSON.parse('{"title":"Numpy","description":"","frontmatter":{},"headers":[],"relativePath":"人工智能/Python——Numpy.md","filePath":"人工智能/Python——Numpy.md"}'),h={name:"人工智能/Python——Numpy.md"};function p(l,s,e,k,d,r){return t(),i("div",null,s[0]||(s[0]=[n(`<h1 id="numpy" tabindex="-1">Numpy <a class="header-anchor" href="#numpy" aria-label="Permalink to &quot;Numpy&quot;">​</a></h1><h3 id="为什么numpy数组比python原生数组快" tabindex="-1">为什么Numpy数组比Python原生数组快？ <a class="header-anchor" href="#为什么numpy数组比python原生数组快" aria-label="Permalink to &quot;为什么Numpy数组比Python原生数组快？&quot;">​</a></h3><p>为什么Numpy数组比Python原生数组快？因为Numpy数组的元素类型是固定的，而Python原生数组的元素类型可以是任意类型，这使得Numpy数组可以在内存中连续存储，一个元素的下一个地址就是下一个元素，而Python数组的元素分散存储在内存的不同区域，每个区域存储一个元素值和下一个地址，系统要先“跳到”下一个地址再读取里面的值。</p><h3 id="创建数组" tabindex="-1">创建数组 <a class="header-anchor" href="#创建数组" aria-label="Permalink to &quot;创建数组&quot;">​</a></h3><p>如下示例创建了一个2行3列的二维数组：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numpy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.array([[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]])</span></span></code></pre></div><p>range(n)返回从0到n-1这n个整数组成的一维数组。</p><p>arange(m,n,t)表示元素从m到n-1，步长为t。</p><p>zeros(n)表示n个元素是0的一维数组。zeros(m,n)表示m行n列元素全部为0的二维数组。</p><p>ones(n)表示n个元素是1的数组。ones(m,n)表示m行n列元素全部为1的二维数组。</p><p>eye(n)表示对角线为1，其它元素全部为0的n行n列的二维数组。对角线指的是从左上角到右下角。</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成数字范围，默认步长为1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [0,1,2,3,4,5,6,7,8,9]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成数字范围且指定步长</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arange(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [0,2,4,6,8]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成全0数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zeros(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [0,0,0,0,0,0,0,0,0,0]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成全1数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ones(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [1,1,1,1,1,1,1,1,1,1]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 对角线为1，其它为0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eye(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  [  [ 1, 0, 0 ], </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#     [ 0, 1, 0 ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#     [ 0, 0, 1 ]  ]</span></span></code></pre></div><h3 id="基本属性" tabindex="-1">基本属性 <a class="header-anchor" href="#基本属性" aria-label="Permalink to &quot;基本属性&quot;">​</a></h3><p>一维数组就是向量，二维数组就是矩阵。ndim表示维度，也叫做秩。</p><p>形状，就是几行几列，使用shape属性得到。m x n 的二维数组，shape为(m,n)。</p><table tabindex="0"><thead><tr><th>函数或属性</th><th>作用</th></tr></thead><tbody><tr><td>shape()</td><td>返回形状，一个元组，(m,n) m行n列</td></tr><tr><td>size</td><td>属性为元素总个数，即mxn的值</td></tr><tr><td>reshape(m,n)</td><td>改变形状为 mxn</td></tr><tr><td>dtype</td><td>元素的数据类型</td></tr><tr><td>A.T</td><td>A的转置矩阵</td></tr></tbody></table><h3 id="拷贝" tabindex="-1">拷贝 <a class="header-anchor" href="#拷贝" aria-label="Permalink to &quot;拷贝&quot;">​</a></h3><p>跟Python的规则一样，如果直接用等号将一个数组赋值给新数组，则为浅拷贝，任何一个数组的更改都会导致另一个的同步更改，因为这两个数组的指针指向同一处内存区域。</p><p>如果要进行深拷贝，则应该使用copy()方法，这样，两个数组的指针指向不同的内存区域，两个是完全独立的，更改其中一个并不会影响另一个。</p><h3 id="拼接" tabindex="-1">拼接 <a class="header-anchor" href="#拼接" aria-label="Permalink to &quot;拼接&quot;">​</a></h3><p>如果元素的行数相同，则可以进行横向连接，使用hstack()方法。</p><p>如果元素的列数相同，则可以进行纵向堆叠，使用vstack()方法。</p><h3 id="运算" tabindex="-1">运算 <a class="header-anchor" href="#运算" aria-label="Permalink to &quot;运算&quot;">​</a></h3><table tabindex="0"><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>mean()</td><td>求平均值</td></tr><tr><td>max()/min()</td><td>求最大/最小值</td></tr><tr><td>std()</td><td>求标准差</td></tr><tr><td>var()</td><td>求方差</td></tr></tbody></table><h3 id="索引" tabindex="-1">索引 <a class="header-anchor" href="#索引" aria-label="Permalink to &quot;索引&quot;">​</a></h3><p>与Python的数组一样，arr[n]表示一维数组的第n+1个元素。arr[m][n]表示二维数组中，第m+1行n+1列的元素。</p><h3 id="随机数" tabindex="-1">随机数 <a class="header-anchor" href="#随机数" aria-label="Permalink to &quot;随机数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>np.random.rand(n)</td><td>生成n个<code>[0,1)</code>之间的一维数组</td></tr><tr><td>np.random.rand(m,n)</td><td>生成<code>[0,1)</code>之间的 mxn 二维数组，元素均匀分布</td></tr><tr><td>np.random.randn(n,m)</td><td>生成<code>[0,1)</code>之间的 mxn 二维数组，元素平均值0、方差1，呈正态分布</td></tr></tbody></table><h3 id="存储数组数据" tabindex="-1">存储数组数据 <a class="header-anchor" href="#存储数组数据" aria-label="Permalink to &quot;存储数组数据&quot;">​</a></h3><p>可以使用.npy文件后缀名保存数组，方便重复使用。</p><p>如下示例先将arr数组使用np.save()方法保存到arr.npy文件中，然后使用load()方法读取数组，赋值给arr2：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numpy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.array([[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 存储为arr.npy文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">np.save(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;arr.npy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,arr)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 读取arr.npy文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.load(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;arr.npy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr2)</span></span></code></pre></div><h3 id="变形" tabindex="-1">变形 <a class="header-anchor" href="#变形" aria-label="Permalink to &quot;变形&quot;">​</a></h3><table tabindex="0"><thead><tr><th>方法或属性</th><th>作用</th></tr></thead><tbody><tr><td>shape</td><td>属性返回形状，是一个元组，包括行数和列数</td></tr><tr><td>reshape(p,q)</td><td>表示重新编排形状为 p x q</td></tr><tr><td>reval()</td><td>还原为一维数组，返回指针，依然指向原数组</td></tr><tr><td>flatteb()</td><td>还原为一维数组，返回新数组</td></tr></tbody></table><h3 id="创建单位数组" tabindex="-1">创建单位数组 <a class="header-anchor" href="#创建单位数组" aria-label="Permalink to &quot;创建单位数组&quot;">​</a></h3><table tabindex="0"><thead><tr><th>方法或属性</th><th>作用</th></tr></thead><tbody><tr><td>zeros(m,n)</td><td>生成mxn的元素全是0的二维数组</td></tr><tr><td>ones(m,n)</td><td>生成mxn的元素全为1的二维数组</td></tr><tr><td>eye(m,n)</td><td>生成主对角线为1、其它元素全为0的 m x n 的二维数组，主对角线的意思是从左上角到右下角</td></tr></tbody></table><p>例如：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numpy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.zeros(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.ones(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.eye(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="创建数列" tabindex="-1">创建数列 <a class="header-anchor" href="#创建数列" aria-label="Permalink to &quot;创建数列&quot;">​</a></h3><p>arange(m,n,t)表示元素从m到n-1，步长为t。如果省略t，则步长为1。</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numpy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.arange(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [1,3,5,7,9]</span></span></code></pre></div><p>linspace(m,n,count) 表示最大值n，最小值为m，总数为count个的均匀分隔的数组。</p><p>这两个区别在第三个参数，一个是指定步长，一个是指定元素个数（自动计算步长）。</p><h3 id="数学函数" tabindex="-1">数学函数 <a class="header-anchor" href="#数学函数" aria-label="Permalink to &quot;数学函数&quot;">​</a></h3><p>如下函数均接收一个Numpy数组作为参数：</p><table tabindex="0"><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>np.sum()</td><td>求所有元素的和</td></tr><tr><td>np.abs ()</td><td>绝对值</td></tr><tr><td>np.sin()、np.cos()</td><td>正余弦</td></tr><tr><td>log log10</td><td>自然对数，以10为底的对数</td></tr><tr><td>exp</td><td>自然对数的x次方</td></tr><tr><td>mean()</td><td>求平均值。</td></tr><tr><td>max()/min()</td><td>求最大/最小值。</td></tr><tr><td>std()</td><td>求标准差。</td></tr><tr><td>var()</td><td>求方差。</td></tr></tbody></table>`,46)]))}const o=a(h,[["render",p]]);export{y as __pageData,o as default};
