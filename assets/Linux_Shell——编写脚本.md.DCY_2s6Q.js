import{_ as e,c as t,o as p,ae as i,j as s,a}from"./chunks/framework.rTUm5mJw.js";const u=JSON.parse('{"title":"脚本","description":"","frontmatter":{},"headers":[],"relativePath":"Linux/Shell——编写脚本.md","filePath":"Linux/Shell——编写脚本.md"}'),l={name:"Linux/Shell——编写脚本.md"};function h(d,n,o,c,r,k){return p(),t("div",null,n[0]||(n[0]=[i(`<h1 id="脚本" tabindex="-1">脚本 <a class="header-anchor" href="#脚本" aria-label="Permalink to &quot;脚本&quot;">​</a></h1><h2 id="声明变量" tabindex="-1">声明变量 <a class="header-anchor" href="#声明变量" aria-label="Permalink to &quot;声明变量&quot;">​</a></h2><p>变量在Linux脚本中非常常见。</p><p>声明变量很简单，只需要使用等号将变量名和变量值连接起来即可：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>a=1</span></span>
<span class="line"><span>str=hello</span></span>
<span class="line"><span>echo $a</span></span>
<span class="line"><span>echo $str</span></span></code></pre></div><p>如果值有空格，则需要使用引号：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">str</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =&quot;hello bash&quot;</span></span></code></pre></div><p>要特别注意，等号两边不能有空格，下面的命令是错的：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>a  =  1</span></span>
<span class="line"><span>bash: a: command not found</span></span></code></pre></div><p>bash会把a当做命令、= 和1当做参数去执行。</p><h2 id="打印变量" tabindex="-1">打印变量 <a class="header-anchor" href="#打印变量" aria-label="Permalink to &quot;打印变量&quot;">​</a></h2><p>使用echo加上美元符号$和花括号打印变量：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>echo $PATH</span></span>
<span class="line"><span>echo \${PATH}</span></span></code></pre></div><p>如果变量名称不存在空格和特殊字符，上面两种方式都可以。如果存在空格或特殊字符，变量名称就要用花括号括起来。</p><h2 id="字符串转义" tabindex="-1">字符串转义 <a class="header-anchor" href="#字符串转义" aria-label="Permalink to &quot;字符串转义&quot;">​</a></h2><p>有些时候我们恰好需要用到特殊字符本来的含义，例如：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;coffee is </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$five</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div><p>这里会找到名为five的变量解析出来，但我们的本意是只想显示“咖啡是5美元”，所以使用转义：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;coffee is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">five&quot;</span></span></code></pre></div><p>这样就输出了“coffee is $five”。</p><h2 id="变量内容的编辑" tabindex="-1">变量内容的编辑 <a class="header-anchor" href="#变量内容的编辑" aria-label="Permalink to &quot;变量内容的编辑&quot;">​</a></h2><ul><li><code>\${变量#关键词}</code> 若变量内容从头开始的数据符合关键词，则将符合的最短数据删除</li><li><code>\${变量##关键词}</code> 若变量内容从头开始的数据符合关键词，则将符合的最长数据删除</li><li><code>{变量%关键词}</code> 若变量内容从尾向前的数据符合关键词，则将符合的最短数据删除</li><li><code>{变量%%关键词}</code> 若变量内容从尾向前的数据符合关键词，则将符合的最长数据删除</li><li><code>{变量/旧字符串/新字符串}</code> 若变量内容符合旧字符串，则第一个旧字符串会被新字符串替换</li><li><code>{变量//旧字符串/新字符串}</code> 若变量内容符合旧字符串，则全部的旧字符串会被新字符串替换</li></ul><p>示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>str=&quot;hello,hello,world&quot;</span></span>
<span class="line"><span>echo \${str#h*o} # 输出 ,hello,world</span></span>
<span class="line"><span>echo \${str##h*o}  # 输出 rld</span></span>
<span class="line"><span></span></span>
<span class="line"><span>echo \${str/hello/HELLO} # 输出 HELLO,hello,world</span></span>
<span class="line"><span>echo \${str//hello/HELLO} # 输出 HELLO,HELLO,world</span></span></code></pre></div><h2 id="几种特殊的内容替换结构" tabindex="-1">几种特殊的内容替换结构 <a class="header-anchor" href="#几种特殊的内容替换结构" aria-label="Permalink to &quot;几种特殊的内容替换结构&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>\${var:-string} </span></span>
<span class="line"><span>\${var:+string} </span></span>
<span class="line"><span>\${var:=string}</span></span>
<span class="line"><span>\${var:?string}</span></span></code></pre></div><p>1、<code>{var:-string}</code>和<code>\${var:=string}</code>:若变量var为空，则用在命令行中用string来替换<code>\${var:-string}</code>，否则变量var不为空时，则用变量var的值来替换<code>\${var:-string}</code>；对于<code>\${var:=string}</code>的替换规则和<code>\${var:-string}</code>是一样的，所不同之处是<code>\${var:=string}</code>若var为空时，用string替换<code>\${var:=string}</code>的同时，把string赋给变量var： <code>\${var:=string}</code>很常用的一种用法是，判断某个变量是否赋值，没有的话则给它赋上一个默认值。</p><p>2、<code>\${var:+string}</code>的替换规则和上面的相反，即只有当var不是空的时候才替换成string，若var为空时则不替换或者说是替换成变量 var的值，即空值。(因为变量var此时为空，所以这两种说法是等价的)</p><p>3、<code>{var:?string}</code>替换规则为：若变量var不为空，则用变量var的值来替换<code>\${var:?string}</code>；若变量var为空，则把string输出到标准错误中，并从脚本中退出。我们可利用此特性来检查是否设置了变量的值。</p><p>补充扩展：在上面这五种替换结构中string不一定是常值的，可用另外一个变量的值或是一种命令的输出。</p><h2 id="shell脚本的参数" tabindex="-1">shell脚本的参数 <a class="header-anchor" href="#shell脚本的参数" aria-label="Permalink to &quot;shell脚本的参数&quot;">​</a></h2><p>新建一个Shell脚本1.sh内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>echo  $1</span></span></code></pre></div><p>$1表示该脚本的第一个参数，类似的 $2 、$3表示第2、3个参数，以此类推。</p><p>然后运行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ./test.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  hello</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span></span></code></pre></div><p>另外，$*引用所有参数列表。$#：表示执行脚本传入参数的所有个数</p><h2 id="条件表达式" tabindex="-1">条件表达式 <a class="header-anchor" href="#条件表达式" aria-label="Permalink to &quot;条件表达式&quot;">​</a></h2><p>在脚本中经常会用到条件表达式，条件表达式常用在if语句中，用中括号包裹，各个部分用空格隔开，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>if [ 2 -eq 3 ] then </span></span>
<span class="line"><span>        echo 相等</span></span>
<span class="line"><span>fi</span></span></code></pre></div><p>条件表达式中最常见的情况是比较，比较常用的比较是数值比较和字符串比较。</p><h2 id="数值比较" tabindex="-1">数值比较 <a class="header-anchor" href="#数值比较" aria-label="Permalink to &quot;数值比较&quot;">​</a></h2><p>与数学公式不同，数值比较需要用到-gt、-lt、-eq表示大于、小于、等于号，而不能是<code>&gt;</code>、<code>&lt;</code>、=。</p><table tabindex="0"><thead><tr><th>比较运算符</th><th>解释</th><th>示例</th></tr></thead><tbody><tr><td>-eq</td><td>相等</td><td>[ 1 -eq 2 ]</td></tr><tr><td>-ne</td><td>不等于</td><td>[ 1 ne 2 ]</td></tr><tr><td>-ge</td><td>大于等于</td><td>[ 1 -eq 2 ]</td></tr><tr><td>-gt</td><td>大于</td><td>[ 2 -gt 1 ]</td></tr><tr><td>-le</td><td>小于等于</td><td>[ 1 -le 2 ]</td></tr><tr><td>-lt</td><td>小于</td><td>[ 1 -le 2 ]</td></tr></tbody></table><p>表格示例中空格间距比较大，就是为了题型注意各个部分一定要加上空格。</p><h2 id="字符串比较" tabindex="-1">字符串比较 <a class="header-anchor" href="#字符串比较" aria-label="Permalink to &quot;字符串比较&quot;">​</a></h2><p>字符串的比较方式是根据ASCII逐个字母比较，常用的字符串比较运算符如下：</p><table tabindex="0"><thead><tr><th>比较运算符</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>=</td><td>相同</td><td>[ &#39;a&#39; = &#39;a&#39; ]</td></tr><tr><td>!=</td><td>不同</td><td>[ &#39;a&#39; != &#39;b&#39; ]</td></tr><tr><td><code>&lt;</code></td><td>小于</td><td><code> [ &#39;a&#39; &lt; &#39;A&#39; ]</code></td></tr><tr><td><code>&gt;</code></td><td>大于</td><td><code> [ &#39;a&#39; &gt; &#39;A&#39; ]</code></td></tr><tr><td>-n str</td><td>字符串str长度是否非0</td><td>[ -n &#39;a&#39; ]</td></tr><tr><td>-z str</td><td>字符串str长度是否为0</td><td>[ -z &#39;&#39; ]</td></tr></tbody></table><h2 id="文件判断" tabindex="-1">文件判断 <a class="header-anchor" href="#文件判断" aria-label="Permalink to &quot;文件判断&quot;">​</a></h2><p>文件判断常用的运算符如下表：</p><table tabindex="0"><thead><tr><th>运算符</th><th>解释</th></tr></thead><tbody><tr><td>-d file</td><td>判断file是否为目录</td></tr><tr><td>-e file</td><td>判断file是否存在</td></tr><tr><td>-f file</td><td>检查file是否为文件</td></tr><tr><td>-r file</td><td>判断文件是否可读</td></tr><tr><td>-s file</td><td>判断file是否存在并非空</td></tr><tr><td>-w file</td><td>判断file是可写</td></tr><tr><td>-x file</td><td>判断file是可执行</td></tr></tbody></table><h2 id="if语句" tabindex="-1">if语句 <a class="header-anchor" href="#if语句" aria-label="Permalink to &quot;if语句&quot;">​</a></h2><p>if语句的作用是根据条件执行不同的指令。if语句的通用语法如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>if [ 条件表达式 ]; then</span></span>
<span class="line"><span>    指令</span></span></code></pre></div><p>注意条件表达式各个部分都要有空格，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>if [ 2 -gt 1 ] then </span></span>
<span class="line"><span>        echo 大于 </span></span>
<span class="line"><span>fi</span></span></code></pre></div><p>单分支就是只有一个分支，如同上面的示例。</p><p>双分支有一个if和一个else，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>if [ 2 -eq 3 ]  then </span></span>
<span class="line"><span>        echo 相等</span></span>
<span class="line"><span>else </span></span>
<span class="line"><span>        echo 不相等</span></span>
<span class="line"><span>fi</span></span></code></pre></div><p>多分支有一个以上的elif，例如如下脚本1.sh：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>if [ $1 -ge 80 ] then </span></span>
<span class="line"><span>        echo 优秀</span></span>
<span class="line"><span>elif [ $1 -ge 60 ] then </span></span>
<span class="line"><span>        echo 及格</span></span>
<span class="line"><span>else </span></span>
<span class="line"><span>        echo 不及格</span></span>
<span class="line"><span>fi</span></span></code></pre></div><p>这里$1表示传入脚本的第一个参数，运行如下示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ bash  1.sh 88</span></span>
<span class="line"><span>优秀</span></span>
<span class="line"><span>$ bash  1.sh 76</span></span>
<span class="line"><span>及格</span></span>
<span class="line"><span>$ bash  1.sh 50</span></span>
<span class="line"><span>不及格</span></span></code></pre></div><h2 id="for循环" tabindex="-1">for循环 <a class="header-anchor" href="#for循环" aria-label="Permalink to &quot;for循环&quot;">​</a></h2><p>for循环的基本语法格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>for item in con1 con2 con3</span></span>
<span class="line"><span>do</span></span>
<span class="line"><span>    命令</span></span>
<span class="line"><span>done</span></span></code></pre></div><p>遍历文件</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filelist</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当前目录所有文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${filelist}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">i+1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;第\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}个文件是：\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><p>还有一种写法</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (( 初始值; 限制条件; 赋值))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    程序段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><p>示例</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (( i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;file\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><h3 id="创建函数" tabindex="-1">创建函数 <a class="header-anchor" href="#创建函数" aria-label="Permalink to &quot;创建函数&quot;">​</a></h3><p>使用关键字:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function 函数名 {</span></span>
<span class="line"><span>    函数体</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>第二种方式是不使用function关键字,但要带上括号,</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>函数名(){</span></span>
<span class="line"><span>    函数体</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="调用函数" tabindex="-1">调用函数 <a class="header-anchor" href="#调用函数" aria-label="Permalink to &quot;调用函数&quot;">​</a></h3><p>要使用函数,直接写上函数名即可,不要带括号。</p><p>一个具体的示例如下:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function Welcome {</span></span>
<span class="line"><span>    read -p &quot;你的名字:&quot; name</span></span>
<span class="line"><span>    echo &quot;你好,\${name}&quot; </span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Welcome</span></span></code></pre></div><h3 id="带参数的函数" tabindex="-1">带参数的函数 <a class="header-anchor" href="#带参数的函数" aria-label="Permalink to &quot;带参数的函数&quot;">​</a></h3><p>与脚本的参数一样，函数的参数不需要指定名称，而是使用$1 、$2指代。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function Welcome{</span></span>
<span class="line"><span>  echo &quot;你好，$1&quot;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Welcome 张三  #输出：你好，张三</span></span></code></pre></div><h3 id="函数的返回值" tabindex="-1">函数的返回值 <a class="header-anchor" href="#函数的返回值" aria-label="Permalink to &quot;函数的返回值&quot;">​</a></h3><p>函数使用echo返回值，这与常用的return习惯不太一样。注意，echo在函数体外是向终端输出内容，但在这里表示返回值，也就是说，分两种情况：</p><ul><li>如果有一个变量接住这个函数，此echo就失去了原有的作用——也就不会在终端输出值。</li><li>如果没有变量接住这个函数，那么echo就会在终端输出。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function Welcome {</span></span>
<span class="line"><span>    echo &quot;你好，$1&quot;  # 此时不会在终端输出</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>out=$(Welcome)  # 变量接住了，没有输出</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Welcome 张三  # 没有变量接住，输出 你好，张三</span></span></code></pre></div><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><p>如果已经知道数组元素，使用如下方式新建数组：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>arr=(1 2 three four)</span></span></code></pre></div><p>空格分隔的每个部分都对应一个元素，如下示例按索引位置打印元素：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>echo \${arr[0]}  \${arr[3]}</span></span>
<span class="line"><span>1 four</span></span></code></pre></div><h2 id="给脚本传递参数" tabindex="-1">给脚本传递参数 <a class="header-anchor" href="#给脚本传递参数" aria-label="Permalink to &quot;给脚本传递参数&quot;">​</a></h2>`,95),s("ul",null,[s("li",null,[s("code",null,"$0"),a(" 第0个参数，即执行文件本身")]),s("li",null,[s("code",null,"$1"),a(" 第1个参数")]),s("li",null,[s("code",null,"$n"),a(" 第n个参数, n是正整数")]),s("li",{10:""},"注意, 如果参数过多, 达到了两位数,那么就要加花括号,例如 $"),s("li",null,[s("code",null,"$#"),a(" 表示脚本运行时携带的命令行参数的个数")]),s("li",null,[s("code",null,"$*"),a("变量会将所有的命令行参数视为一个单词, 该选项不常用")]),s("li",null,[s("code",null,"$@"),a("变量会将所有的命令行参数视为同一字符串中的多个独立的单词，以便你能通过for循环遍历,")])],-1),i(`<p>新建一个Shell脚本test.sh内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>echo  &quot;第0个参数也就是脚本名称是：$0&quot;</span></span>
<span class="line"><span>echo  &quot;第1个参数是：$1&quot;</span></span>
<span class="line"><span>echo  &quot;第2个参数是：$2&quot;</span></span>
<span class="line"><span>echo  &quot;参数个数为: $#&quot;</span></span>
<span class="line"><span>echo  &quot;参数列表为: $@&quot;</span></span></code></pre></div><p>$1表示该脚本的第一个参数，类似的 $2 、$3表示第2、3个参数，以此类推。</p><p>然后运行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ./test.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shell</span></span></code></pre></div><p>输出如下结果:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>第0个参数也就是脚本名称是：test.txt</span></span>
<span class="line"><span>第1个参数是：hello</span></span>
<span class="line"><span>第2个参数是：bash</span></span>
<span class="line"><span>参数个数为: 3</span></span>
<span class="line"><span>参数列表为: hello bash shell</span></span></code></pre></div>`,7)]))}const b=e(l,[["render",h]]);export{u as __pageData,b as default};
