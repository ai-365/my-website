import{_ as s,c as p,o as e,ae as n}from"./chunks/framework.rTUm5mJw.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"人工智能/Python——map()内置函数.md","filePath":"人工智能/Python——map()内置函数.md"}'),t={name:"人工智能/Python——map()内置函数.md"};function i(l,a,o,c,d,m){return e(),p("div",null,a[0]||(a[0]=[n(`<h2 id="map" tabindex="-1">map() <a class="header-anchor" href="#map" aria-label="Permalink to &quot;map()&quot;">​</a></h2><p>很多使用，需要对列表的每一个元素执行相同的操作，这叫做列表的迭代。使用内置的map()函数可以完成，map()函数的用法是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>map(迭代函数, 可迭代对象)</span></span></code></pre></div><p>非常需要注意的是，map()函数的返回结果是一个map对象，map对象也是可迭代对象，并不是我们所期待的传入对象的类型。</p><p>迭代函数通常是一个匿名函数，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>li = [1,2,3]</span></span>
<span class="line"><span>li2 = map(lambda x:x**2, li)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>print(list(li2)) # [1,4,9]</span></span></code></pre></div><p>注意，示例中的li2只是一个map对象，需要使用list()包装成一个新列表。</p>`,7)]))}const h=s(t,[["render",i]]);export{_ as __pageData,h as default};
