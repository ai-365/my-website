import{_ as e,c as n,o as s,ae as t}from"./chunks/framework.CDwmhxVj.js";const l="/blog/assets/%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.Cpl54LGd.png",b=JSON.parse('{"title":"函数计算","description":"","frontmatter":{},"headers":[],"relativePath":"Linux/函数计算.md","filePath":"Linux/函数计算.md"}'),p={name:"Linux/函数计算.md"};function i(o,a,d,r,c,h){return s(),n("div",null,a[0]||(a[0]=[t('<h1 id="函数计算" tabindex="-1">函数计算 <a class="header-anchor" href="#函数计算" aria-label="Permalink to &quot;函数计算&quot;">​</a></h1><h2 id="触发器" tabindex="-1">触发器 <a class="header-anchor" href="#触发器" aria-label="Permalink to &quot;触发器&quot;">​</a></h2><p>函数计算是事件驱动的云服务，因此要执行一个函数，就必须要有一个事件发生，这个事件叫做“触发器”。</p><ul><li>云产品事件：例如存储桶中新增了一个文件。</li><li>HTTP事件 ：使用浏览器、API、SDK发送HTTP请求时触发。</li></ul><p>一个触发器加上一个请求处理程序就组成了一个可以提供服务的函数。</p><h2 id="函数处理程序" tabindex="-1">函数处理程序 <a class="header-anchor" href="#函数处理程序" aria-label="Permalink to &quot;函数处理程序&quot;">​</a></h2><p>一个触发器对应一个请求处理程序handler。handler包括一个文件名和方法名。</p><p>对于Python而言，请求处理程序格式为<code>文件名.方法名</code>，例如文件名是main.py，方法名为handler，那么请求处理程序为main.handler。</p><p>对于Node.js而言，请求处理程序为<code>文件名.方法名</code>，例如文件名是index.js，方法名为handler，那么请求处理程序为 index.handler。</p><h2 id="event" tabindex="-1">event <a class="header-anchor" href="#event" aria-label="Permalink to &quot;event&quot;">​</a></h2><p>event 为调用函数时传入的参数。即响应报文的body，用JSON格式表示。例如：</p><p><img src="'+l+`" alt="响应报文"></p><p>通过json模块的loads()方法可以将JSON对象转化成Python对象：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>eventObj = json.loads(event)</span></span></code></pre></div><h2 id="node-js运行时" tabindex="-1">Node.js运行时 <a class="header-anchor" href="#node-js运行时" aria-label="Permalink to &quot;Node.js运行时&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// index.mjs</span></span>
<span class="line"><span>export const handler = async (event, context) =&gt; {</span></span>
<span class="line"><span>    const eventObj = JSON.parse(event)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    // 请求体</span></span>
<span class="line"><span>    const body = eventObj.body</span></span>
<span class="line"><span>    return body</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>关键信息说明如下：</p><ul><li>handler ： 方法名称。例如，为FC函数配置的请求处理程序为index.handler，那么函数计算的入口就是index.mjs中的handler函数。</li><li>event ：请求信息，包含了请求头、请求体等关键信息，格式为JSON文本。</li><li>context ：函数的执行环境信息。例如运行时、内存大小等。</li><li>return ： 作为响应报文的响应体返回给客户端。</li></ul><h2 id="python运行时" tabindex="-1">Python运行时 <a class="header-anchor" href="#python运行时" aria-label="Permalink to &quot;Python运行时&quot;">​</a></h2><p>使用HTTP请求处理程序前，请确保已经为函数配置<strong>HTTP触发器</strong>。</p><p>一个简单的HTTP处理函数示例如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>def handler(event, context):</span></span>
<span class="line"><span>    return &#39;hello world&#39;</span></span></code></pre></div>`,22)]))}const v=e(p,[["render",i]]);export{b as __pageData,v as default};
