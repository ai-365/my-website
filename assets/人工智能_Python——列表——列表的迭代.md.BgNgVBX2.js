import{_ as s,c as t,o as n,ae as p}from"./chunks/framework.rTUm5mJw.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"人工智能/Python——列表——列表的迭代.md","filePath":"人工智能/Python——列表——列表的迭代.md"}'),e={name:"人工智能/Python——列表——列表的迭代.md"};function i(l,a,o,c,_,d){return n(),t("div",null,a[0]||(a[0]=[p(`<p>很多使用，需要对列表的每一个元素执行相同的操作，这叫做列表的迭代。使用内置的map()函数可以完成，map()函数的用法是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>map(迭代函数, 可迭代对象)</span></span></code></pre></div><p>非常需要注意的是，map()函数的返回结果是一个map对象，map对象也是可迭代对象，并不是我们所期待的传入对象的类型。</p><p>迭代函数通常是一个匿名函数，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>list9 = [2,3,4,5]</span></span>
<span class="line"><span>list10 = map(lambda x:x**2, list9)</span></span>
<span class="line"><span>print(list10) # &lt;map object at 0x0000025024539D20&gt; : map对象</span></span>
<span class="line"><span>list11 = list(list10) # 通过list()方法包装成一个新的list对象</span></span>
<span class="line"><span>print(list11) # [4, 9, 16, 25]</span></span></code></pre></div>`,5)]))}const h=s(e,[["render",i]]);export{m as __pageData,h as default};
