import{_ as e,c as s,o as t,ae as i}from"./chunks/framework.rTUm5mJw.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Linux/Docker——编写Dockerfile.md","filePath":"Linux/Docker——编写Dockerfile.md"}'),p={name:"Linux/Docker——编写Dockerfile.md"};function o(n,a,l,c,r,d){return t(),s("div",null,a[0]||(a[0]=[i('<h2 id="编写dockerfile文件" tabindex="-1">编写Dockerfile文件 <a class="header-anchor" href="#编写dockerfile文件" aria-label="Permalink to &quot;编写Dockerfile文件&quot;">​</a></h2><p>Dockerfile是构建镜像的配置文件，Docker依据Dockerfile文件逐行执行其中的命令，从而构建我们所需的镜像。</p><h3 id="from-获取基础镜像" tabindex="-1">FROM ： 获取基础镜像 <a class="header-anchor" href="#from-获取基础镜像" aria-label="Permalink to &quot;FROM ： 获取基础镜像&quot;">​</a></h3><p>FROM的作用是获取基础镜像，必须写且必须写在第一行。</p><p>FROM的格式为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>FROM image:tag</span></span></code></pre></div><p>image是镜像名称，tag是版本标签，一般为数字或latest，如果不写默认为最新版。</p><h3 id="copy-复制本地文件到镜像" tabindex="-1">COPY：复制本地文件到镜像 <a class="header-anchor" href="#copy-复制本地文件到镜像" aria-label="Permalink to &quot;COPY：复制本地文件到镜像&quot;">​</a></h3><p>COPY 的作用是将本地文件复制到镜像内的虚拟目录。COPY的语法格式为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>COPY src1 src2 ...  dest</span></span></code></pre></div><p>src可以是文件或目录。dest是镜像的目标目录。不过，尽量不要将src写成文件夹，因为会复制整个目录的内容,包括文件系统元数据。</p><p>文件名支持使用通配符。</p><p>COPY命令的示例如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>COPY  *.html  *.js  *.css  /opt</span></span></code></pre></div><p>复制文件还有一个命令是ADD。ADD和COPY都是复制，但由于COPY命令更透明，一般优先使用COPY。</p><h3 id="run-执行命令" tabindex="-1">RUN：执行命令 <a class="header-anchor" href="#run-执行命令" aria-label="Permalink to &quot;RUN：执行命令&quot;">​</a></h3><p>RUN的作用是在构建时执行一条或多条命令，例如通过yum或apt下载软件包。</p><p>需要特别指出的是，Dockerfile的每一行命令被执行后都会新增一层镜像。因此，最佳的做法是将RUN执行的多条命令合并在一行写，用&amp;&amp;连接，这样有助于减小最终镜像的体积。</p><p>RUN命令示例如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RUN echo 1 &amp;&amp; echo 2</span></span></code></pre></div><h3 id="workdir-设置初始目录" tabindex="-1">WORKDIR ：设置初始目录 <a class="header-anchor" href="#workdir-设置初始目录" aria-label="Permalink to &quot;WORKDIR ：设置初始目录&quot;">​</a></h3><p>WORKDIR的作用是设置容器启动后的初始目录，类似于cd。此后的命令都将以此为工作目录。</p><h3 id="env-设置环境变量" tabindex="-1">ENV：设置环境变量 <a class="header-anchor" href="#env-设置环境变量" aria-label="Permalink to &quot;ENV：设置环境变量&quot;">​</a></h3><p>ENV的作用是设置环境变量，可以一次设置一个：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ENV key1=value1 key2=value2</span></span></code></pre></div><h3 id="cmd-容器启动后的初识命令" tabindex="-1">CMD ：容器启动后的初识命令 <a class="header-anchor" href="#cmd-容器启动后的初识命令" aria-label="Permalink to &quot;CMD ：容器启动后的初识命令&quot;">​</a></h3><p>从镜像开启容器实例后运行的初始命令，初始命令只能有一个。</p><p>CMD命令包括各选项参数用引号包裹，各个部分逗号隔开。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CMD echo &quot;hello&quot;</span></span></code></pre></div>',29)]))}const k=e(p,[["render",o]]);export{u as __pageData,k as default};
